############################################################################## FILE : asteroid.py# WRITER : Yoav Galtzur, yoav.galtzur, 203372511# WRITER : Yosef Yehoshua, yosef12345, 302818513# EXERCISE : intro2cs ex9 2015-2016# DESCRIPTION : ???########################################################################################################################################################### IMPORTS#############################################################################import randomfrom asteroids_helper import Helperimport math############################################################################## CONSTANTS#############################################################################SIZE_FACTOR = 10NORMAL_FACTOR = 5MIN_SPEED = 1TOP_SPEED = 3MIN_ANGLE = 0MAX_ANGLE = 306REVERSE_FACTOR = -1############################################################################## Asteroid CLASS#############################################################################class Asteroid:    """    A class representing an asteroid in the game 'Asteroids'    """    def __init__(self, size, SCREEN_MAX_X, SCREEN_MAX_Y, SCREEN_MIN_X,                 SCREEN_MIN_Y):        """        :param SCREEN_MAX_X: max X coor of the screen        :param SCREEN_MAX_Y: max Y coor of the screen        :param SCREEN_MIN_X: min X coor of the screen        :param SCREEN_MIN_Y: min Y coor of the screen        """        self.__help = Helper()  # An object of the class Helper        self.__angle = random.uniform(MIN_ANGLE, MAX_ANGLE)        self.__speed_x = random.randint(MIN_SPEED, TOP_SPEED)        self.__speed_y = random.randint(MIN_SPEED, TOP_SPEED)        self.__size = size        self.screen_max_x = SCREEN_MAX_X        self.screen_max_y = SCREEN_MAX_Y        self.screen_min_x = SCREEN_MIN_X        self.screen_min_y = SCREEN_MIN_Y        self.length_x_axis = SCREEN_MAX_X - SCREEN_MIN_X        self.length_y_axis = SCREEN_MAX_Y - SCREEN_MIN_Y        self.__radius = self.__size * SIZE_FACTOR - NORMAL_FACTOR        self.__pos_x = random.randint(self.screen_min_x,                                      self.screen_max_x)        self.__pos_y = random.randint(self.screen_min_y,                                      self.screen_max_y)    def get_pos_x(self):        """        :return: position of the asteroid on the X (horizontal) axis        """        return self.__pos_x    def get_pos_y(self):        """        :return: position of the asteroid on the Y (vertical) axis        """        return self.__pos_y    def get_speed_x(self):        """        :return: The asteroid's speed on the X (horizontal) axis        """        return self.__speed_x    def get_speed_y(self):        """        :return: The asteroid's speed on the Y (vertical) axis        """        return self.__speed_y    def get_angle(self):        """        :return: angle of the asteroid according to the X axis        """        return self.__angle    def get_size(self):        """        :return: size of the asteroid        """        return self.__size    def set_position(self):        """        Sets new position to the asteroid,        according to its speed and former pos        """        self.__pos_x = self.__help.set_postion_on_axis(self.__pos_x,                                                       self.__speed_x,                                                       self.screen_min_x,                                                       self.length_x_axis)        self.__pos_y = self.__help.set_postion_on_axis(self.__pos_y,                                                       self.__speed_y,                                                       self.screen_min_y,                                                       self.length_y_axis)    def force_pos_x(self, pos_x):        """        Sets new speed to the asteroid        """        self.__pos_x = pos_x    def force_pos_y(self, pos_y):        """        Sets new speed to the asteroid        """        self.__pos_y = pos_y    def reverse_direction(self):        """        Reverses the direction of the asteroid (used after splitting of a        dead asteroid)        :return:        """        self.__speed_x *= REVERSE_FACTOR        self.__speed_y *= REVERSE_FACTOR    def has_intersection(self, obj):        """        :param obj: the obj that might intersect with the asteroid        :return: True if intersects, False otherwise        """        pos_x = math.pow(self.__pos_x - obj.get_pos_x(), 2)        pos_y = math.pow(self.__pos_y - obj.get_pos_y(), 2)        distance = math.sqrt(pos_x + pos_y)        tot_radius = self.__radius + obj.get_radius()        if distance <= tot_radius:            return True        else:            return False    def gen_speed_x(self, torpedo_speed, old_asteroid_speed_x):        """        Generating a new speed to the asteroid on the X (horizontal) axis,        Based on given formula dependent on the speeds of a given torpedo        and asteroid        :param torpedo_speed: The torpedo speed given        :param old_asteroid_speed_x: The asteroid speed given        """        speed_x = torpedo_speed + old_asteroid_speed_x        size_of_speeds = math.sqrt(            math.pow(old_asteroid_speed_x, 2) + math.pow(old_asteroid_speed_x,                                                         2))        new_speed_x = speed_x / size_of_speeds        self.__speed_x = new_speed_x    def gen_speed_y(self, torpedo_speed, old_asteroid_speed_y):        """        Generating a new speed to the asteroid on the Y (vertical) axis,        Based on given formula dependent on the speeds of a given torpedo        and asteroid        :param torpedo_speed: The torpedo speed given        :param old_asteroid_speed_y: The asteroid speed given        """        speed_y = torpedo_speed + old_asteroid_speed_y        size_of_speeds = math.sqrt(            math.pow(old_asteroid_speed_y, 2) + math.pow(old_asteroid_speed_y,                                                         2))        new_speed_y = speed_y / size_of_speeds        self.__speed_y = new_speed_y