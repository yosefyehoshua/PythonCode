############################################################################## FILE : board.py# WRITER : Yoav Galtzur, yoav.galtzur, 203372511# WRITER : Yosef Yehoshua, yosef12345, 302818513# EXERCISE : intro2cs ex12 2015-2016# DESCRIPTION : Containing two classes for the community board app:# Shape - A class representing a shape in the drawing board# DrawingBoard - A class managing the GUI########################################################################################################################################################### IMPORTS#############################################################################import tkinter as tkfrom tkinter import messageboximport math############################################################################## CONSTANTS#############################################################################HELP_MSG = 'This is a community drawing board. \n' \           'to draw Please select shape and color and pick coordinates' \           'on the canvas: \n' \           'for a line: select 2 dots (the ends if the line)\n' \           'for a rectangle: select 2 dots (the main diagonal)\n' \           'for an oval: select 2 dots (the main diagonal of the rectangle,' \           'blocking the oval\n' \           'for a triangle: select 3 dots (the vertices of the rectangle)\n' \           'IMPORTANT: every time you will pick a new shape you will have' \           ' to re-assign the coordinates.\n' \           'Moreover, the shape you picked will remain until you change' \           ' it.' \           'The other members of the group (listed on the left) ' \           'can draw on the board as well. Their drawings will appear on the'\           ' canvas, their name will appear next to it.' \           ' Have Fun! 'GROUP_FRAME_WIDTH = 20DEFAULT_COLOR = 'black'HEIGHT = 500WIDTH = 500TEXT_COLOR = 'gray21'NAMES_BOX_W = 27NAMES_BOX_L = 31BUTTON_SIZE = 40TRIANGLE_VERTICES = 3OVAL_VERTICES = 2RECTANGLE_VERTICES = 2LINE_VERTICES = 2############################################################################## Shape CLASS#############################################################################class Shape:    """ A class representing a shape in the drawing board """    def __init__(self, owner_name, shape_name, coors, color):        self.__name = shape_name        self.__coors = coors        self.__color = color        self.__owner = owner_name    def get_name(self):        """        :return: the shape's name (string)        """        return self.__name    def get_coors(self):        """        :return: shape's coordinates (tuple)        """        return self.__coors    def get_color(self):        """        :return: shape's color (string)        """        return self.__color    def get_owner(self):        """        :return: the name of the owner (the user that drew the shape (string)        """        return self.__owner############################################################################## DrawingBoard CLASS#############################################################################class DrawingBoard:    """ A class managing the GUI"""    def __init__(self, owner_name, group_name):        self.__root = tk.Tk()        self.__height = HEIGHT        self.__width = WIDTH        self.__board = tk.Canvas(self.__root, width=WIDTH, height=HEIGHT,                                 bg='white')        self.__owner_name = owner_name        self.__group_name = group_name        self.__members = []        self.__members.append(self.__owner_name)        self.__shape_list = []        self.__colors = ('blue', 'red', 'green', 'yellow', 'black', 'violet',                         'orange')  # WHERE SHOULD IT BE?        self.__cur_color = DEFAULT_COLOR        self.__cur_shape = None        self.__cur_coor = []        self.__group_frame = None        self.__scroll_bar = None        self.__names_box = None        self.__colors_menu = None        self.__dot_dic = {'line': LINE_VERTICES,                          'rectangle': RECTANGLE_VERTICES,                          'oval': OVAL_VERTICES,                          'triangle': TRIANGLE_VERTICES}        self.__triangle_icon = tk.PhotoImage(file='triangle.png')        self.__line_icon = tk.PhotoImage(file='line.png')        self.__rectangle_icon = tk.PhotoImage(file='rectangle.png')        self.__oval_icon = tk.PhotoImage(file='oval.png')        self.prepare_drawing_board()    def get_root(self):        """        returns the root of the board        """        return self.__root    def get_drawing_board(self):        """        :return: the drawing board's frame        """        return self.__board    def prepare_drawing_board(self):        """        Sets the board - a blank sheet with the needed buttons        """        self.__root.wm_title("Community Drawing Board")  # change title        self.prepare_menu_bar()        shapes_frame = tk.Frame(self.__root)        shapes_frame.pack(side=tk.TOP, expand=1, fill=tk.X)        self.prepare_shapes_frame(shapes_frame)        self.__group_frame = tk.Frame(self.__root, width=GROUP_FRAME_WIDTH,                                      height=self.__height)        self.__group_frame.pack(side=tk.LEFT)        self.prepare_group_frame()        self.__board.pack()    def prepare_menu_bar(self):        """        Creating the menu, containing the 'Help' button        """        menu = tk.Menu(self.__root)        self.__root.config(menu=menu)        help_menu = tk.Menu(menu)        menu.add_cascade(label="Help", menu=help_menu)        help_menu.add_command(label="What's going on here?",                              command=self.show_help_msg)    def prepare_shapes_frame(self, shapes_frame):        """        creating buttons and locating them in the shapes frame        """        line_button = tk.Button(shapes_frame, text='line',                                command=self.set_cur_shape_h('line'))        line_button.config(image=self.__line_icon, width=BUTTON_SIZE,                           height=BUTTON_SIZE)        line_button.pack(side=tk.RIGHT)        triangle_button = tk.Button(shapes_frame, text='triangle',                                    command=self.set_cur_shape_h('triangle'))        triangle_button.config(image=self.__triangle_icon, width=BUTTON_SIZE,                               height=BUTTON_SIZE)        triangle_button.pack(side=tk.RIGHT)        rectangle_button = tk.Button(shapes_frame, text='rectangle',                                    command=self.set_cur_shape_h('rectangle'))        rectangle_button.config(image=self.__rectangle_icon, width=BUTTON_SIZE,                                height=BUTTON_SIZE)        rectangle_button.pack(side=tk.RIGHT)        oval_button = tk.Button(shapes_frame, text='oval',                                command=self.set_cur_shape_h('oval'))        oval_button.config(image=self.__oval_icon, width=BUTTON_SIZE,                           height=BUTTON_SIZE)        oval_button.pack(side=tk.RIGHT)        # Create the colors drop down menu        color = tk.StringVar()        color.set(self.__cur_color)        self.__colors_menu = tk.OptionMenu(shapes_frame, color,                                           *self.__colors,                                           command=self.set_cur_color)        self.__colors_menu.pack(side=tk.LEFT, anchor='e', fill=tk.BOTH)    def prepare_group_frame(self):        """        Adding the names of the group and the owner to the group frame        """        self.__scroll_bar = tk.Scrollbar(self.__group_frame)        self.__scroll_bar.config()        self.__scroll_bar.pack(side=tk.RIGHT, fill=tk.BOTH, expand=0)        self.__names_box = tk.Listbox(self.__group_frame,                                      yscrollcommand=self.__scroll_bar.set)        self.__names_box.config(height=NAMES_BOX_L, width=NAMES_BOX_W)        self.__names_box.insert(tk.END, self.__group_name)        self.__names_box.insert(tk.END, self.__owner_name)        self.__names_box.pack(side=tk.LEFT, fill=tk.BOTH, expand=1)        self.__scroll_bar.config(command=self.__names_box.yview)        for name in self.__members:  # add all others            if name != self.__owner_name:                self.__names_box.insert(tk.END, name)    def update_group_frame(self):        """        Writes down all of the members in the designated section in the board        :return:        """        self.__scroll_bar.destroy()        self.__names_box.destroy()        self.prepare_group_frame()    def set_cur_color(self, color):        """        sets a color for the shapes to come        :param color: the new color        """        self.__cur_color = color        self.__colors_menu.config(foreground=color)    def set_cur_shape_h(self, shape):        """        sets the current shape to draw on the canvas and restarts the        coordinates picked        :param shape: the shape to draw        """        def set_cur_shape():            self.__cur_shape = shape            self.__cur_coor = []  # CHECK IF NEEDED        return set_cur_shape    def draw_shape(self, shape):        """        Creates a new line, after clicking on the line button        """        name = shape.get_name()        coors = shape.get_coors()        color = shape.get_color()        if name == 'triangle':            self.__board.create_polygon(coors, fill=color)        elif name == 'line':            self.__board.create_line(coors, fill=color)        elif name == 'rectangle':            self.__board.create_rectangle(coors, fill=color)        elif name == 'oval':            self.__board.create_oval(coors, fill=color)        # Write the the owner's name        self.add_owner_name(shape)    def add_owner_name(self, shape):        """        Creating a text with the shape's owner name on the board        the text will be positioned at the coordinate closest to the        middle of the board        :param shape: new shape just drawn        """        mid_point = (self.__width / 2, self.__height / 2)        min_dis = self.__height        text_coord = None        for coord in shape.get_coors():            dist = math.fabs(coord[0] - mid_point[0]) + math.fabs(                coord[1] - mid_point[1])            if dist <= min_dis:                min_dis = dist                text_coord = coord        if text_coord[1] > mid_point[1]:            self.__board.create_text(text_coord, text=shape.get_owner(),                                     anchor='s', fill=TEXT_COLOR)        else:            self.__board.create_text(text_coord, text=shape.get_owner(),                                     anchor='n', fill=TEXT_COLOR)    def show_help_msg(self):        """        display a message on the screen        """        messagebox.showinfo("Help", HELP_MSG)    def show_error_msg(self, msg):        """        Displays the error message given        :param msg: the message given        """        messagebox.showerror("Error!", msg)    def add_shape(self, shape):        """        Adds a new shape to the board, and registering it        :param shape: the shape to add (object of type Shape)        """        self.__shape_list.append(shape)        self.draw_shape(shape)    def add_user(self, member_name):        """        adds a new member to the board and registering it        :param member_name: the name of the member we want to add        """        if member_name not in self.__members:            self.__members.append(member_name)            self.update_group_frame()    def remove_user(self, member_name):        """        adds a new member to the board and registering it        :param member_name: the name of the member we want to add        """        if member_name in self.__members:            self.__members.remove(member_name)            self.update_group_frame()    def canvas_pressed(self, coor):        """        Checks if the canvas was pressed on at a certain coordinate        :return: the shape, if shape was created, else False        """        new_coor = (coor.x, coor.y)        self.__cur_coor.append(new_coor)        if self.__cur_shape:  # check if a shape was chosen            # check if the number of coordinates matches the shape            if len(self.__cur_coor) == self.__dot_dic[self.__cur_shape]:                # Create the new shape                new_shape = Shape(self.__owner_name, self.__cur_shape,                                  self.__cur_coor, self.__cur_color)                self.__cur_coor = []  # Delete old coordinates                self.add_shape(new_shape)  # Draw it on the board!                return new_shape        return False